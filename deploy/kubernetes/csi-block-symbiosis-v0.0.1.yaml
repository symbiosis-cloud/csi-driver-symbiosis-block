# Copyright 2022 Symbiosis
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


apiVersion: storage.k8s.io/v1
kind: CSIDriver
metadata:
  name: block.csi.symbiosis.host
spec:
  attachRequired: true
  podInfoOnMount: true
---
# Controller plugin
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: symbiosis-block-csi-controller
  namespace: symbiosis-system
spec:
  serviceName: csi-symbiosis-block
  selector:
    matchLabels:
      app: symbiosis-csi-controller
  replicas: 1
  template:
    metadata:
      labels:
        app: symbiosis-csi-controller
        role: csi-symbiosis
    spec:
      priorityClassName: system-cluster-critical
      serviceAccount: csi-symbiosis-controller-sa
      containers:
        - name: csi-provisioner
          image: k8s.gcr.io/sig-storage/csi-provisioner:v2.2.2
          args:
            - "--csi-address=$(ADDRESS)"
            - "--default-fstype=ext4"
            - "--v=5"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-attacher
          image: k8s.gcr.io/sig-storage/csi-attacher:v3.3.0
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: symbiosis-csi-plugin
          image: symbiosiscloud/csi-driver-symbiosis-block:0.0.1
          args :
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--node-id=$(KUBE_NODE_NAME)"
            - "--cluster-id=$(SYMBIOSIS_CLUSTER_ID)"
            - "--token=$(SYMBIOSIS_ACCESS_TOKEN)"
            - "--api-endpoint=$(SYMBIOSIS_API)"
          env:
            - name: CSI_ENDPOINT
              value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
            - name: SYMBIOSIS_API
              value: https://staging.api.symbiosis.host/
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: SYMBIOSIS_CLUSTER_ID
              valueFrom:
                secretKeyRef:
                  name: symbiosis
                  key: clusterId
            - name: SYMBIOSIS_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: symbiosis
                  key: symbiosisApiKey
          imagePullPolicy: "Always"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
      volumes:
        - name: socket-dir
          emptyDir: {}
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: csi-symbiosis-controller-sa
  namespace: symbiosis-system
imagePullSecrets:
- name: symbiosis-docker
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-symbiosis-provisioner-role
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["get", "list"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-symbiosis-provisioner-binding
subjects:
  - kind: ServiceAccount
    name: csi-symbiosis-controller-sa
    namespace: symbiosis-system
roleRef:
  kind: ClusterRole
  name: csi-symbiosis-provisioner-role
  apiGroup: rbac.authorization.k8s.io
---
# Attacher must be able to work with PVs, nodes and VolumeAttachments
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-symbiosis-attacher-role
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments/status"]
    verbs: ["patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-symbiosis-attacher-binding
subjects:
  - kind: ServiceAccount
    name: csi-symbiosis-controller-sa
    namespace: symbiosis-system
roleRef:
  kind: ClusterRole
  name: csi-symbiosis-attacher-role
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-symbiosis-snapshotter-role
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["create", "get", "list", "watch", "update", "delete"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create", "list", "watch", "delete"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-symbiosis-snapshotter-binding
subjects:
  - kind: ServiceAccount
    name: csi-symbiosis-controller-sa
    namespace: symbiosis-system
roleRef:
  kind: ClusterRole
  name: csi-symbiosis-snapshotter-role
  apiGroup: rbac.authorization.k8s.io
---
# Node plugin
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: csi-symbiosis-node
  namespace: symbiosis-system
spec:
  selector:
    matchLabels:
      app: csi-symbiosis-node
  template:
    metadata:
      labels:
        app: csi-symbiosis-node
        role: csi-symbiosis
    spec:
      priorityClassName: system-node-critical
      serviceAccount: csi-symbiosis-node-sa
      hostNetwork: true
      containers:
        - name: driver-registrar
          image: quay.io/k8scsi/csi-node-driver-registrar:v2.0.1
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "rm -rf /registration/block.csi.symbiosis.host /registration/block.csi.symbiosis.host-reg.sock"]
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: /var/lib/kubelet/plugins/block.csi.symbiosis.host/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi/
            - name: registration-dir
              mountPath: /registration/
        - name: csi-symbiosis-plugin
          image: symbiosiscloud/csi-driver-symbiosis-block:0.0.1
          args :
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--node-id=$(KUBE_NODE_NAME)"
            - "--cluster-id=$(SYMBIOSIS_CLUSTER_ID)"
            - "--token=$(SYMBIOSIS_ACCESS_TOKEN)"
            - "--api-endpoint=$(SYMBIOSIS_API)"
          env:
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
            - name: SYMBIOSIS_API
              value: https://staging.api.symbiosis.host/
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: SYMBIOSIS_CLUSTER_ID
              valueFrom:
                secretKeyRef:
                  name: symbiosis
                  key: cluster-id
            - name: SYMBIOSIS_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: symbiosis
                  key: access-token
          imagePullPolicy: "Always"
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
            - name: pods-mount-dir
              mountPath: /var/lib/kubelet
              # needed so that any mounts setup inside this container are
              # propagated back to the host machine.
              mountPropagation: "Bidirectional"
            - name: device-dir
              mountPath: /dev
      volumes:
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: DirectoryOrCreate
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins/block.csi.symbiosis.host
            type: DirectoryOrCreate
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet
            type: Directory
        - name: device-dir
          hostPath:
            path: /dev
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-symbiosis-node-sa
  namespace: symbiosis-system
imagePullSecrets:
- name: symbiosis-docker
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-symbiosis-driver-registrar-role
  namespace: symbiosis-system
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-symbiosis-driver-registrar-binding
subjects:
  - kind: ServiceAccount
    name: csi-symbiosis-node-sa
    namespace: symbiosis-system
roleRef:
  kind: ClusterRole
  name: csi-symbiosis-driver-registrar-role
  apiGroup: rbac.authorization.k8s.io          
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: symbiosis-block-storage
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: block.csi.symbiosis.host
allowVolumeExpansion: false
